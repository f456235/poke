{"version":3,"sources":["assets\\script\\no.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["const {ccclass, property} = cc._decorator;\r\nimport GameManager from \"./gamemanager\";\r\nimport GlobalData from \"./GlobalData\";\r\n\r\n@ccclass\r\nexport default class No extends cc.Component {\r\n\r\n    @property\r\n    text: string = 'hello';\r\n\r\n    @property(cc.Integer)\r\n    moveSpeed: number = 1;\r\n\r\n    @property(cc.Float)\r\n    circleRadius: number = 50; // 围绕半径\r\n\r\n    @property(cc.Float)\r\n    angularSpeed: number = 60; // 角速度，控制每秒围绕的角度\r\n\r\n    //@property(cc.Animation)\r\n    animation = null; // 动画组件\r\n\r\n    private isBattle: boolean = false;\r\n\r\n    private targetMan: cc.Node = null; // 目标man节点\r\n    private angle: number = 0; // 当前角度\r\n    private updateTimer: number = 0; // 更新位置的计时器\r\n\r\n    start() {\r\n        // 获取场景中的\"man\"节点\r\n        this.targetMan = cc.find(\"Canvas/man\");\r\n\r\n        // 播放 \"no\" 动画\r\n        \r\n    }\r\n\r\n    onLoad(){\r\n        this.animation = this.getComponent(cc.Animation);\r\n    }\r\n\r\n    update(dt: number) {\r\n        //console.log(\"this.animation:\", this.animation);\r\n        if (this.animation && !this.animation.getAnimationState(\"no\").isPlaying) {\r\n            this.animation.play(\"no\");\r\n        }\r\n        // 如果目标man节点存在，则围绕其移动\r\n        if (this.targetMan) {\r\n            // 计算当前位置与目标位置之间的向量\r\n            const targetPos = this.targetMan.position;\r\n            const currentPos = this.node.position;\r\n            const direction = targetPos.sub(currentPos);\r\n\r\n            // 计算当前位置与目标位置之间的距离\r\n            const distance = direction.mag();\r\n\r\n            if (distance > this.circleRadius) {\r\n                // 根据移动速度和时间间隔更新位置\r\n                const moveDistance = direction.normalize().mul(this.moveSpeed * dt);\r\n                this.node.position = currentPos.add(moveDistance);\r\n            } else {\r\n                // 每隔一段时间围绕目标运动一次\r\n                this.updateTimer += dt;\r\n                const updateInterval = 0.005; // 更新位置的时间间隔\r\n\r\n                if (this.updateTimer >= updateInterval) {\r\n                    this.updateTimer -= updateInterval;\r\n\r\n                    // 围绕目标运动\r\n                    const angleIncrement = this.angularSpeed * updateInterval;\r\n                    this.angle = (this.angle + angleIncrement) % 360; // 增加角度并限制在0-360范围内\r\n\r\n                    // 根据角度和半径计算新位置\r\n                    const radians = cc.misc.degreesToRadians(this.angle);\r\n                    const offsetX = Math.cos(radians) * this.circleRadius;\r\n                    const offsetY = Math.sin(radians) * this.circleRadius;\r\n                    const circlePosition = cc.v2(targetPos.x + offsetX, targetPos.y + offsetY);\r\n                    this.node.position = cc.v3(circlePosition.x, circlePosition.y, this.node.position.z);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"]}